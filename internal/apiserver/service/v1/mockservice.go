// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/neee333ko/IAM/internal/apiserver/service/v1 (interfaces: Service,UserServ,SecretServ,PolicyServ)
//
// Generated by this command:
//
//	mockgen -destination=mockservice.go . Service,UserServ,SecretServ,PolicyServ
//

// Package mock_v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v10 "github.com/neee333ko/api/apiserver/v1"
	v11 "github.com/neee333ko/component-base/pkg/meta/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// PolicyServ mocks base method.
func (m *MockService) PolicyServ() PolicyServ {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyServ")
	ret0, _ := ret[0].(PolicyServ)
	return ret0
}

// PolicyServ indicates an expected call of PolicyServ.
func (mr *MockServiceMockRecorder) PolicyServ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyServ", reflect.TypeOf((*MockService)(nil).PolicyServ))
}

// SecretServ mocks base method.
func (m *MockService) SecretServ() SecretServ {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretServ")
	ret0, _ := ret[0].(SecretServ)
	return ret0
}

// SecretServ indicates an expected call of SecretServ.
func (mr *MockServiceMockRecorder) SecretServ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretServ", reflect.TypeOf((*MockService)(nil).SecretServ))
}

// UserServ mocks base method.
func (m *MockService) UserServ() UserServ {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserServ")
	ret0, _ := ret[0].(UserServ)
	return ret0
}

// UserServ indicates an expected call of UserServ.
func (mr *MockServiceMockRecorder) UserServ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserServ", reflect.TypeOf((*MockService)(nil).UserServ))
}

// MockUserServ is a mock of UserServ interface.
type MockUserServ struct {
	ctrl     *gomock.Controller
	recorder *MockUserServMockRecorder
	isgomock struct{}
}

// MockUserServMockRecorder is the mock recorder for MockUserServ.
type MockUserServMockRecorder struct {
	mock *MockUserServ
}

// NewMockUserServ creates a new mock instance.
func NewMockUserServ(ctrl *gomock.Controller) *MockUserServ {
	mock := &MockUserServ{ctrl: ctrl}
	mock.recorder = &MockUserServMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserServ) EXPECT() *MockUserServMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserServ) Create(c context.Context, user *v10.User, options *v11.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, user, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserServMockRecorder) Create(c, user, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserServ)(nil).Create), c, user, options)
}

// Delete mocks base method.
func (m *MockUserServ) Delete(c context.Context, name string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserServMockRecorder) Delete(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserServ)(nil).Delete), c, name, options)
}

// DeleteCollection mocks base method.
func (m *MockUserServ) DeleteCollection(c context.Context, names []string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", c, names, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockUserServMockRecorder) DeleteCollection(c, names, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockUserServ)(nil).DeleteCollection), c, names, options)
}

// Get mocks base method.
func (m *MockUserServ) Get(c context.Context, name string, options *v11.GetOptions) (*v10.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, name, options)
	ret0, _ := ret[0].(*v10.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserServMockRecorder) Get(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserServ)(nil).Get), c, name, options)
}

// List mocks base method.
func (m *MockUserServ) List(c context.Context, options *v11.ListOptions) (*v10.UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, options)
	ret0, _ := ret[0].(*v10.UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserServMockRecorder) List(c, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserServ)(nil).List), c, options)
}

// Update mocks base method.
func (m *MockUserServ) Update(c context.Context, user *v10.User, options *v11.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, user, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserServMockRecorder) Update(c, user, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserServ)(nil).Update), c, user, options)
}

// MockSecretServ is a mock of SecretServ interface.
type MockSecretServ struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServMockRecorder
	isgomock struct{}
}

// MockSecretServMockRecorder is the mock recorder for MockSecretServ.
type MockSecretServMockRecorder struct {
	mock *MockSecretServ
}

// NewMockSecretServ creates a new mock instance.
func NewMockSecretServ(ctrl *gomock.Controller) *MockSecretServ {
	mock := &MockSecretServ{ctrl: ctrl}
	mock.recorder = &MockSecretServMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretServ) EXPECT() *MockSecretServMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretServ) Create(c context.Context, secret *v10.Secret, options *v11.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, secret, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSecretServMockRecorder) Create(c, secret, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretServ)(nil).Create), c, secret, options)
}

// Delete mocks base method.
func (m *MockSecretServ) Delete(c context.Context, name string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretServMockRecorder) Delete(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretServ)(nil).Delete), c, name, options)
}

// DeleteCollection mocks base method.
func (m *MockSecretServ) DeleteCollection(c context.Context, names []string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", c, names, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockSecretServMockRecorder) DeleteCollection(c, names, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockSecretServ)(nil).DeleteCollection), c, names, options)
}

// Get mocks base method.
func (m *MockSecretServ) Get(c context.Context, username string, options *v11.GetOptions) (*v10.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, username, options)
	ret0, _ := ret[0].(*v10.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretServMockRecorder) Get(c, username, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretServ)(nil).Get), c, username, options)
}

// GetSingle mocks base method.
func (m *MockSecretServ) GetSingle(c context.Context, name string, options *v11.GetOptions) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingle", c, name, options)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingle indicates an expected call of GetSingle.
func (mr *MockSecretServMockRecorder) GetSingle(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingle", reflect.TypeOf((*MockSecretServ)(nil).GetSingle), c, name, options)
}

// List mocks base method.
func (m *MockSecretServ) List(c context.Context, options *v11.ListOptions) (*v10.SecretList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, options)
	ret0, _ := ret[0].(*v10.SecretList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretServMockRecorder) List(c, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretServ)(nil).List), c, options)
}

// MockPolicyServ is a mock of PolicyServ interface.
type MockPolicyServ struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyServMockRecorder
	isgomock struct{}
}

// MockPolicyServMockRecorder is the mock recorder for MockPolicyServ.
type MockPolicyServMockRecorder struct {
	mock *MockPolicyServ
}

// NewMockPolicyServ creates a new mock instance.
func NewMockPolicyServ(ctrl *gomock.Controller) *MockPolicyServ {
	mock := &MockPolicyServ{ctrl: ctrl}
	mock.recorder = &MockPolicyServMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyServ) EXPECT() *MockPolicyServMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicyServ) Create(c context.Context, policy *v10.Policy, options *v11.CreateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", c, policy, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPolicyServMockRecorder) Create(c, policy, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicyServ)(nil).Create), c, policy, options)
}

// Delete mocks base method.
func (m *MockPolicyServ) Delete(c context.Context, name string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", c, name, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyServMockRecorder) Delete(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicyServ)(nil).Delete), c, name, options)
}

// DeleteCollection mocks base method.
func (m *MockPolicyServ) DeleteCollection(c context.Context, names []string, options *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", c, names, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection.
func (mr *MockPolicyServMockRecorder) DeleteCollection(c, names, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockPolicyServ)(nil).DeleteCollection), c, names, options)
}

// Get mocks base method.
func (m *MockPolicyServ) Get(c context.Context, username string, options *v11.GetOptions) (*v10.PolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", c, username, options)
	ret0, _ := ret[0].(*v10.PolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyServMockRecorder) Get(c, username, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyServ)(nil).Get), c, username, options)
}

// GetSingle mocks base method.
func (m *MockPolicyServ) GetSingle(c context.Context, name string, options *v11.GetOptions) (*v10.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSingle", c, name, options)
	ret0, _ := ret[0].(*v10.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSingle indicates an expected call of GetSingle.
func (mr *MockPolicyServMockRecorder) GetSingle(c, name, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingle", reflect.TypeOf((*MockPolicyServ)(nil).GetSingle), c, name, options)
}

// List mocks base method.
func (m *MockPolicyServ) List(c context.Context, options *v11.ListOptions) (*v10.PolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", c, options)
	ret0, _ := ret[0].(*v10.PolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicyServMockRecorder) List(c, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicyServ)(nil).List), c, options)
}

// Update mocks base method.
func (m *MockPolicyServ) Update(c context.Context, policy *v10.Policy, options *v11.UpdateOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", c, policy, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPolicyServMockRecorder) Update(c, policy, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicyServ)(nil).Update), c, policy, options)
}
