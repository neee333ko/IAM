// Code generated by MockGen. DO NOT EDIT.
// Source: shutdown.go
//
// Generated by this command:
//
//	mockgen -source=shutdown.go -package=mock -destination=./mock/mock_shutdownmanager.go
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	shutdown "github.com/neee333ko/IAM/pkg/shutdown"
	gomock "go.uber.org/mock/gomock"
)

// MockShutdownCallBack is a mock of ShutdownCallBack interface.
type MockShutdownCallBack struct {
	ctrl     *gomock.Controller
	recorder *MockShutdownCallBackMockRecorder
	isgomock struct{}
}

// MockShutdownCallBackMockRecorder is the mock recorder for MockShutdownCallBack.
type MockShutdownCallBackMockRecorder struct {
	mock *MockShutdownCallBack
}

// NewMockShutdownCallBack creates a new mock instance.
func NewMockShutdownCallBack(ctrl *gomock.Controller) *MockShutdownCallBack {
	mock := &MockShutdownCallBack{ctrl: ctrl}
	mock.recorder = &MockShutdownCallBackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShutdownCallBack) EXPECT() *MockShutdownCallBackMockRecorder {
	return m.recorder
}

// OnShutdown mocks base method.
func (m *MockShutdownCallBack) OnShutdown(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnShutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// OnShutdown indicates an expected call of OnShutdown.
func (mr *MockShutdownCallBackMockRecorder) OnShutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnShutdown", reflect.TypeOf((*MockShutdownCallBack)(nil).OnShutdown), arg0)
}

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
	isgomock struct{}
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// OnError mocks base method.
func (m *MockErrorHandler) OnError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnError", arg0)
}

// OnError indicates an expected call of OnError.
func (mr *MockErrorHandlerMockRecorder) OnError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockErrorHandler)(nil).OnError), arg0)
}

// MockShutdownManager is a mock of ShutdownManager interface.
type MockShutdownManager struct {
	ctrl     *gomock.Controller
	recorder *MockShutdownManagerMockRecorder
	isgomock struct{}
}

// MockShutdownManagerMockRecorder is the mock recorder for MockShutdownManager.
type MockShutdownManagerMockRecorder struct {
	mock *MockShutdownManager
}

// NewMockShutdownManager creates a new mock instance.
func NewMockShutdownManager(ctrl *gomock.Controller) *MockShutdownManager {
	mock := &MockShutdownManager{ctrl: ctrl}
	mock.recorder = &MockShutdownManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShutdownManager) EXPECT() *MockShutdownManagerMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockShutdownManager) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockShutdownManagerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockShutdownManager)(nil).GetName))
}

// ShutdownFinish mocks base method.
func (m *MockShutdownManager) ShutdownFinish() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownFinish")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownFinish indicates an expected call of ShutdownFinish.
func (mr *MockShutdownManagerMockRecorder) ShutdownFinish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownFinish", reflect.TypeOf((*MockShutdownManager)(nil).ShutdownFinish))
}

// ShutdownStart mocks base method.
func (m *MockShutdownManager) ShutdownStart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShutdownStart")
	ret0, _ := ret[0].(error)
	return ret0
}

// ShutdownStart indicates an expected call of ShutdownStart.
func (mr *MockShutdownManagerMockRecorder) ShutdownStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShutdownStart", reflect.TypeOf((*MockShutdownManager)(nil).ShutdownStart))
}

// Start mocks base method.
func (m *MockShutdownManager) Start(arg0 *shutdown.GracefulShutdown) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockShutdownManagerMockRecorder) Start(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockShutdownManager)(nil).Start), arg0)
}
